// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  List          List[]
  Note          Note[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model List {
  id        String @id @default(cuid())
  name      String @unique
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     Item[]
  createdAt String
  updatedAt String

  @@index([userId])
}

model Item {
  id        String  @id @default(cuid())
  title     String
  listId    String
  list      List    @relation(fields: [listId], references: [id], onDelete: Cascade)
  isChecked Boolean @default(false)
  createdAt String
  updatedAt String

  @@unique([title, listId])
  @@index([listId])
}

model Note {
  id         String @id @default(cuid())
  userId     String
  instanceId String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  content    String @db.Text
  updatedAt  String
  createdAt  String

  @@index([userId])
}
